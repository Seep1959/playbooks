- name: Setup silk group
  group:
    name: "{{ silk_group }}"
    state: present
  become: yes

- name: Setup silk user
  user:
    name: "{{ silk_user }}"
    group: "{{ silk_group }}"
    state: present
  become: yes

- name: Install packages
  yum:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items:
    - gcc
    - make
    - c-ares
    - c-ares-devel
    - doxygen
    - git-core
    - glib2
    - glib2-devel
    - gnutls
    - gnutls-devel
    - openssl-devel
    - lzo
    - lzo-devel
    - libpcap
    - libpcap-devel
    - net-tools
    - pcre-devel
    - python
    - python-devel
    - wget
    - zlib
    - zlib-devel
  become: yes

## TODO: Check if installed already

- name: Ensure dirs exist
  file:
    state: directory
    path: "{{ item }}"
    owner: "{{ silk_user }}"
    group: "{{ silk_group }}"
    recurse: yes
  with_items:
    - "{{ silk_tmp_dir }}"
    - "{{ silk_data_dir }}"
  become: yes

## YAF Setup
- block:
  - name: download yaf
    get_url:
      url: "{{ silk_yaf_url }}"
      dest: "{{ silk_tmp_dir }}"
      checksum: sha256:{{ silk_yaf_sha256 }}

  - name: Extract yaf
    unarchive:
      src: "{{ silk_tmp_dir }}/{{ silk_yaf_fn }}"
      dest: "{{ silk_tmp_dir }}"
      remote_src: true

  - name: compile yaf
    environment:
      PKG_CONFIG_PATH: /usr/local/lib/pkgconfig
    command: "{{ item }} chdir={{ silk_tmp_dir }}/{{ silk_yaf_fn.split('.tar')[0]  }}"
    with_items:
      - ./configure --enable-applabel
      - make
  become_user: "{{ silk_user }}"
  become: yes
  when: not silk_no_yaf

- block:
  - name: install yaf
    command: "make install chdir={{ silk_tmp_dir }}/{{ silk_yaf_fn.split('.tar')[0]  }}"

  - name: copy yaf systemd service file
    template:
      src: templates/yaf.service.j2
      dest: "/etc/systemd/system/yaf.service"

  - name: Enable yaf service at boot
    service:
      name: yaf
      state: started
      enabled: yes
  become: yes
  when: not silk_no_yaf

## SILK SETUP
- block:
  - name: download libfixbuf
    get_url:
      url: "{{ silk_lfb_url }}"
      dest: "{{ silk_tmp_dir }}"
      checksum: sha256:{{ silk_lfb_sha256 }}

  - name: download silk
    get_url:
      url: "{{ silk_silk_url }}"
      dest: "{{ silk_tmp_dir }}"
      checksum: sha256:{{ silk_silk_sha256 }}

  - name: Extract libfixbuf
    unarchive:
      src: "{{ silk_tmp_dir }}/{{ silk_lfb_fn }}"
      dest: "{{ silk_tmp_dir }}"
      remote_src: true

  - name: Extract silk
    unarchive:
      src: "{{ silk_tmp_dir }}/{{ silk_silk_fn }}"
      dest: "{{ silk_tmp_dir }}"
      remote_src: true

  - name: compile libfixbuf
    command: "{{ item }} chdir={{ silk_tmp_dir }}/{{ silk_lfb_fn.split('.tar')[0]  }}"
    with_items:
      - ./configure
      - make
  become_user: "{{ silk_user }}"
  become: yes

- name: install libfixbuf
  command: "make install chdir={{ silk_tmp_dir }}/{{ silk_lfb_fn.split('.tar')[0]  }}"
  become: yes


- name: compile silk
  command: "{{ item }} chdir={{ silk_tmp_dir }}/{{ silk_silk_fn.split('.tar')[0]  }}"
  with_items:
    - ./configure --with-libfixbuf=/usr/local/lib/pkgconfig/ --with-python
    - make
  become_user: "{{ silk_user }}"
  become: yes

- name: install silk
  command: "make install chdir={{ silk_tmp_dir }}/{{ silk_silk_fn.split('.tar')[0]  }}"
  become: yes

- name: Copy silk.conf to ld.so
  copy:
    src: files/silk.conf
    dest: /etc/ld.so.conf.d/silk.conf
  become: yes

- name: ldconfig
  command: ldconfig
  become: yes

- name: copy silk.conf
  copy:
    remote_src: true
    src: "{{ silk_tmp_dir }}/{{ silk_silk_fn.split('.tar')[0]  }}/site/twoway/silk.conf"
    dest: "{{ silk_data_dir }}/silk.conf"
  become_user: "{{ silk_user }}"
  become: yes

- name: copy sensors.conf template
  template:
    src: templates/sensors.conf.j2
    dest: "{{ silk_data_dir }}/sensors.conf"
  become_user: "{{ silk_user }}"
  become: yes

- name: copy rwflowpack.conf template
  template:
    src: templates/rwflowpack.conf.j2
    dest: /usr/local/etc/rwflowpack.conf
  become: yes


- block:
  - name: get geoip zip
    get_url:
      url: "{{ silk_geoip_url }}"
      dest: "{{ silk_tmp_dir }}/geoip.zip"

  - name: unzip geoip data
    unarchive:
      src: "{{ silk_tmp_dir }}/geoip.zip"
      dest: "{{ silk_tmp_dir }}/"
      remote_src: True

  - name: create geoip data file
    shell: cat {{ silk_tmp_dir }}/GeoIPCountryWhois.csv | /usr/local/bin/rwgeoip2ccmap --csv-input > {{ silk_tmp_dir }}/country_codes.pmap

  - name: import geoip data file
    shell: mv {{ silk_tmp_dir }}/country_codes.pmap {{ silk_data_dir }}/
  tags: geoip
  become_user: "{{ silk_user }}"
  become: yes

- name: symlink geoip file
  file:
    src: "{{ silk_data_dir }}/country_codes.pmap"
    dest: /usr/local/share/silk/country_codes.pmap
    state: link
    force: yes
  tags: geoip
  become: yes

- name: Create cron for geoip
  cron:
    name: "Update geoip data"
    cron_file: update_geoip
    special_time: weekly
    user: "{{ silk_user }}"
    job: "wget {{ silk_geoip_url }} -O {{ silk_tmp_dir }}/geoip.zip; unzip -f {{ silk_tmp_dir }}/geoip.zip; cat {{ silk_tmp_dir }}/GeoIPCountryWhois.csv | /usr/local/bin/rwgeoip2ccmap --csv-input > {{ silk_tmp_dir }}/country_codes.pmap; mv {{ silk_tmp_dir }}/country_codes.pmap {{ silk_data_dir }}/country_codes.pmap"
    state: present
  tags: geoip
  become: yes

- name: copy rwflowpack systemd service file
  template:
    src: templates/rwflowpack.service.j2
    dest: "/etc/systemd/system/rwflowpack.service"
  become: yes

- name: Enable rwflowpack service at boot
  service:
    name: rwflowpack
    state: started
    enabled: yes
  become: yes

